module.exports = {
    env: {
        browser: true,
        es2021: true,
    },
    plugins: ["react", "unicorn"],
    extends: [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:prettier/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@typescript-eslint/recommended",
        "plugin:import/typescript",
        "standard-with-typescript",
        "prettier",
    ],
    overrides: [],
    parserOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
        parser: "@typescript-eslint/parser",
        project: "./tsconfig.eslint.json",
    },
    rules: {
        "@typescript-eslint/ban-ts-comment": "warn",
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/explicit-module-boundary-types": "warn",
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-unused-vars": ["error", { varsIgnorePattern: "_" }],
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-nullish-coalescing": ["error", { ignoreTernaryTests: false }],
        "@typescript-eslint/prefer-ts-expect-error": "off",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "warn",
        "arrow-body-style": ["error", "as-needed"],
        "react/react-in-jsx-scope": "off", // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md
        "react/prop-types": "off", // Not necessary to define additional propTypes in components, as the prop type errors are handled by TS. See https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md
        "sort-imports": ["error", { ignoreCase: true, ignoreDeclarationSort: true }],
        "import/no-unused-modules": "error",
        "import/order": [
            1,
            {
                groups: [["external", "builtin"], "internal", ["sibling", "parent"], "index"],
                pathGroups: [
                    { pattern: "components", group: "internal" },
                    { pattern: "components/**", group: "internal" },
                    { pattern: "assets/**", group: "internal", position: "after" },
                ],
                pathGroupsExcludedImportTypes: ["internal"],
                alphabetize: {
                    order: "asc",
                    caseInsensitive: true,
                },
            },
        ],
        "import/default": "error",
        "import/export": "error",
        "import/first": "error",
        "import/group-exports": "off", // See https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/group-exports.md
        "import/namespace": "error",
        "import/no-absolute-path": "error",
        "import/no-anonymous-default-export": "error",
        "import/no-cycle": "warn",
        "import/no-deprecated": "error",
        "import/no-duplicates": "error",
        "import/no-mutable-exports": "error",
        "import/no-namespace": "warn",
        "import/no-relative-parent-imports": "error",
        "import/no-restricted-paths": "error",
        "import/no-self-import": "error",
        "import/no-unused-modules": "error",
        "import/no-useless-path-segments": "error",
        "import/no-webpack-loader-syntax": "error",
        "unicorn/consistent-destructuring": "error",
        "unicorn/consistent-function-scoping": "error",
        "unicorn/error-message": "error",
        "unicorn/explicit-length-check": "error",
        "unicorn/import-style": "error",
        "unicorn/no-abusive-eslint-disable": "error",
        "unicorn/no-array-callback-reference": "error",
        "unicorn/no-array-for-each": "error",
        "unicorn/no-array-method-this-argument": "error",
        "unicorn/no-array-reduce": "error",
        "unicorn/no-await-expression-member": "error",
        "unicorn/no-new-array": "error",
        "unicorn/no-object-as-default-parameter": "error",
        "unicorn/no-useless-undefined": ["error", { checkArguments: false }],
        "unicorn/prefer-array-some": "error",
        "unicorn/prefer-at": "error",
        "unicorn/prefer-module": "error",
        "unicorn/prefer-node-protocol": "off", // See https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-node-protocol.md
        "unicorn/prefer-number-properties": "error",
        "unicorn/prefer-prototype-methods": "error",
        "unicorn/prefer-spread": "error",
        "unicorn/prefer-string-slice": "error",
        "unicorn/prefer-ternary": "off", // https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-ternary.md
        "unicorn/prefer-top-level-await": "error",
        "unicorn/prevent-abbreviations": [
            "error",
            {
                ignore: ["i18n"],
            },
        ],
    },
    settings: {
        react: {
            version: "detect",
        },
    },
};
